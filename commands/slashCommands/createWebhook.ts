import { existsSync, readFileSync, writeFileSync } from "fs";
import { generateLoginButton, getPatreonData } from "./patreonHelpers/oauth";
import { listFolders, storeToken } from "./googleDriveHelpers/oauth";

import {
  CommandInteraction,
  Message,
  MessageActionRow,
  MessageInteraction,
  MessageSelectMenu,
  TextChannel,
} from "discord.js";
import { SlashCommand } from "./typing";
import { app } from "./webserver/express";
import { client } from "../client";
import { redirectUrl } from "../../config/config.json";

const createCrudeWebhook = (channelID, auth) => {
  if (!existsSync("./webhooks.json")) {
    writeFileSync("./webhooks.json", JSON.stringify({}));
  }

  const webhooks = readFileSync("./webhooks.json", "utf8");
  const parsedWebhooks = JSON.parse(webhooks);
  parsedWebhooks[channelID] = auth;
  writeFileSync("./webhooks.json", JSON.stringify(parsedWebhooks));
};

app.post("/webhooks/:channelid/", async (req, res) => {
  console.log(req.body);
  if (!existsSync("./webhooks.json")) {
    writeFileSync("./webhooks.json", JSON.stringify({}));
  }
  const d = JSON.parse(readFileSync("./webhooks.json").toString());
  if (d[req.params.channelid] != req.body.auth) {
    res.status(401).send("Unauthorized");
  }
  await client.channels
    .fetch(req.params.channelid)
    .then((channel: TextChannel) => {
      return channel.send(req.body.message);
    });
  res.send("ok");
});

export const createWebhook: SlashCommand = {
  skipDeferReply: true,

  slashCommand: async (client, interaction: CommandInteraction) => {
    try {
      if (interaction.user.id != interaction.guild.ownerId) {
        await interaction.reply({
          content: "You must be the server owner to use this command",
          ephemeral: true,
        });
        return;
      }
      await interaction.deferReply({ ephemeral: true });
      const message = (await interaction.editReply({
        content: "Please enter the channel for the webhook",

        components: [
          // {
          //   type: "ACTION_ROW",

          //   components: [
          //     {
          //       type: "SELECT_MENU",
          //       customId: "channelSelect",

          //       options: (
          //         await interaction.guild.channels.fetch()
          //       )
          //         .filter((channel) => channel.type == "GUILD_TEXT")
          //         .map((channel) => {
          //           return {
          //             label: channel.name,
          //             value: channel.id,
          //           };
          //         }),
          //     },
          //   ],
          // },
          new MessageActionRow().setComponents(
            new MessageActionRow().addComponents(
              new MessageSelectMenu()
                .addOptions(
                  (
                    await interaction.guild.channels.fetch()
                  )
                    .filter((channel) => channel.type == "GUILD_TEXT")
                    .map((channel) => {
                      return {
                        label: channel.name,
                        value: channel.id,
                      };
                    })
                )
                .setCustomId("channelselect")
            )
          ),
        ],
      })) as Message;

      const a = message
        .awaitMessageComponent({
          filter: (interaction) => interaction.user.id == interaction.user.id,
          componentType: "SELECT_MENU",
          time: 120000,
        })
        .then(async (interaction) => {
          await interaction.deferUpdate();
          const channel = interaction.channelId;
          const auth = Math.random().toString(36).substring(2, 15);
          createCrudeWebhook(channel, auth);
          await interaction.editReply({
            content: `Heres the code to send messages to ${channel}\n\n
            JS/TS\n\`\`\`js
            import axios from "axios";
            axios.request({
                method: "POST",
                url: "${redirectUrl}/webhooks/${channel}/",
                data: {
                    auth: "${auth}",
                    message: "Hello World",
                },
            });
            \`\`\`
            
            Python\n\`\`\`py
            import requests
            requests.post("${redirectUrl}/webhooks/${channel}/", json={
                "auth": "${auth}",
                "message": "Hello World",
            })
            \`\`\`

            Disclaimer: code generated by ai, may require some tweaking
            `,
          });
        });
    } catch (e) {
      await interaction.editReply({
        content: JSON.stringify(e),
      });
    }
  },
  contextCommand: async (interaction) => {
    return;
  },
  modalSubmit: async (client, interaction) => {
    return;
  },
  commandSchema: {
    name: "createwebhook",
    description: "create a webhook",
  },
};
